// bitmap file 
// (c) Technion IIT, Department of Electrical and Computer Engineering 2023 
// generated by the automatic Python tool 
 
 
 module brittleBitMap (

                    input   logic   clk,
                    input   logic   resetN,
                    input logic [10:0] offsetX,// offset from top left  position
                    input logic [10:0] offsetY,
                    input   logic   InsideRectangle, //input that the pixel is within a bracket

                    output  logic   drawingRequest, //output that the pixel should be dispalyed
                    output  logic   [7:0] RGBout,  //rgb value from the bitmap
                    output  logic   [3:0] HitEdgeCode //one bit per edge
 ) ;


// generating the bitmap


parameter logic [7:0] TRANSPARENT_ENCODING = 8'h1C;// RGB value in the bitmap representing a transparent pixel

logic[0:31][0:31][7:0] object_colors = {
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'hf8,8'hf8,8'he4,8'he5,8'he5,8'hed,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'hf8,8'hf8,8'he4,8'he5,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'he5,8'he5,8'he5,8'he5,8'hed,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'he5,8'he5,8'he5,8'he4,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'hed,8'hed,8'he5,8'hed,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'he5,8'he5,8'he5,8'he5,8'h20,8'h00,8'he5,8'he4,8'he4,8'ha4,8'h00,8'hed,8'he5,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'h00,8'h00},
    {8'hed,8'hed,8'hed,8'hed,8'h00,8'h00,8'hed,8'hed,8'hed,8'ha4,8'h00,8'hcd,8'hcd,8'hed,8'hed,8'h00,8'h00,8'h00,8'h00,8'hed,8'hed,8'h00,8'h00,8'h00,8'h00,8'h00,8'had,8'hed,8'hed,8'hed,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h60,8'h60,8'h00,8'h00,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h00,8'h00,8'h00,8'h00,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h00,8'h00},
    {8'hec,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00},
    {8'hec,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'hc5,8'ha4,8'ha4,8'he5,8'he5,8'he5,8'h84,8'h84,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h84,8'he5,8'he5,8'he5,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h20,8'h60,8'h60,8'h60,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'hed,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h60,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h20,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h20,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'hf8,8'hf9,8'he4,8'he5,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'hf8,8'hf8,8'he5,8'he5,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'h00,8'h00,8'h00,8'hcd,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'he4,8'he5,8'he5,8'hed,8'h00,8'h20,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'he5,8'h00,8'h20,8'he5,8'hcd,8'h00,8'hcd,8'he5,8'h20,8'h00,8'h00,8'h00},
    {8'he5,8'he5,8'he4,8'hed,8'h00,8'h00,8'he5,8'hcd,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'hed,8'he5,8'h00,8'h20,8'he5,8'hcd,8'h00,8'hcd,8'he5,8'h20,8'h00,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h20,8'h00,8'h00,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hed,8'he5,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'h00,8'h20},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he4,8'he5,8'h00,8'h00,8'h00,8'h00,8'he4,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5,8'he5},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'he5,8'hed,8'hed,8'hed,8'hed,8'hed,8'hed,8'hed,8'h00,8'h00,8'h00,8'h00,8'he5,8'he4,8'hed,8'hed,8'hed,8'hed,8'he5,8'hed,8'hed,8'hed,8'hed,8'hed,8'hed},
    {8'he5,8'he5,8'h00,8'h00,8'he5,8'he5,8'he5,8'hcd,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'he5,8'he5,8'h00,8'h00,8'h00,8'h20,8'he5,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'hcd,8'hcd,8'h00,8'h00,8'hed,8'hcd,8'hcd,8'had,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'hed,8'hcd,8'h00,8'h00,8'h00,8'h20,8'hed,8'h20,8'h00,8'h00,8'h00,8'h00,8'h00},
    {8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00,8'h00}};



//////////--------------------------------------------------------------------------------------------------------------=
//hit bit map has one bit per edge:  hit_colors[3:0] =   {Left, Top, Right, Bottom}
//there is one bit per edge, in the corner two bits are set
 logic [0:3] [0:3] [3:0] hit_colors =
           {16'hC446,
            16'h8C62,
            16'h8932,
            16'h9113};
 // pipeline (ff) to get the pixel color from the array
//////////--------------------------------------------------------------------------------------------------------------=
always_ff@(posedge clk or negedge resetN)
begin
    if(!resetN) begin
        RGBout <=   8'h00;
        HitEdgeCode <= 4'h0;
    end
    else begin
        RGBout <= TRANSPARENT_ENCODING ; // default
        HitEdgeCode <= 4'h0;

        if (InsideRectangle == 1'b1 )
        begin // inside an external bracket
            HitEdgeCode <= hit_colors[offsetY >> 3][offsetX >> 3 ]; // get hitting edge from the colors table
            RGBout <= object_colors[offsetY][offsetX];
        end

    end
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
